// REFRESH REGISTERS FUNCTION ///////////////////////////////////////////////////////
var numRegClicks = 0;
function refreshRegs (){
	// grab all data as big string
	// cache data comes in as .... abcd ....
	// where ' ' acts as a delimiter and a,b,c,d are words from a cacheLine
	var regStr = view.grabDataFrom_Registers();

	// convert cache string into array
	var regArr = regStr.split(' ');
	
	// button click testing
	if (numRegClicks > 0){
		self#regsCell.text = "number of times refreshed: ".concat(numRegClicks.toString());
		self#regsCell.$append(<br>);
	}
	
	// add in each line to cache UI with a break character
	// first set text to the empty string since we are repopulating the whole thing
	for (var i = 0; i < regArr.length; i++){
		self#regsCell.$append(<font color="blue">{i}: </font>{regArr[i]}<br>);
	}
	
	numRegClicks++;
}

var numDramClicks = 0;
function refreshDram(){
	// grab all DRAM lines from DRAM as string
	// cache data comes in as .... abcd ....
	// where ' ' acts as a delimiter and a,b,c,d are words from a cacheLine
	var dramStr = view.grabDataFrom_DRAM();

	// convert dram string into array
	var dramArr = dramStr.split(' ');

	// button click testing
	if (numDramClicks > 0){
		self#dramCell.text = "number of times refreshed: ".concat(numDramClicks.toString());
		self#dramCell.$append(<br>);
	}
	
	// add in each line to cache UI with a break character
	for (var i = 0; i < dramArr.length; i++){
		self#dramCell.$append(<font color="blue">{i}: </font>{dramArr[i]}<br>);
	}
	
	
	numDramClicks++;
}

var numSpadClicks = 0;
function refreshSpad(){
	// grab all DRAM lines from DRAM as string
	// cache data comes in as .... abcd ....
	// where ' ' acts as a delimiter and a,b,c,d are words from a cacheLine
	var spadStr = view.grabDataFrom_SPAD();

	// convert cache string into array
	var spadArr = spadStr.split(' ');

	// button click testing
	if (numSpadClicks > 0){
		self#spadCell.text = "number of times refreshed: ".concat(numSpadClicks.toString());
		self#spadCell.$append(<br>);
	}
	
	// add in each line to cache UI with a break character
	for (var i = 0; i < spadArr.length; i++){
		self#spadCell.$append(<font color="blue">{i}: </font>{spadArr[i]}<br>);
	}
	
	
	numSpadClicks++;
}

var numCacheClicks = 0;
function refreshCache(){
	// grab all cachelines from cache as string
	// cache data comes in as .... abcd ....
	// where ' ' acts as a delimiter and a,b,c,d are words from a cacheLine
	var cacheStr = view.grabDataFrom_Cache();

	// convert cache string into array
	var cacheArr = cacheStr.split('X');
	
	// button click testing
	if (numCacheClicks > 0){
		self#cacheCell.text = "number of times refreshed: ".concat(numCacheClicks.toString());
		self#cacheCell.$append(<br>);
	}

	// add in each line to cache UI with a break character
	for (var i = 0; i < cacheArr.length; i++){
		self#cacheCell.$append(<font color="blue">{i}: </font>{cacheArr[i]}<br>);
	}
	
	numCacheClicks++;
}

function updateClock(){
	// grab all cachelines from cache as string
	// cache data comes in as .... abcd ....
	// where ' ' acts as a delimiter and a,b,c,d are words from a cacheLine
	var cyclesStr = view.getClockCount();

	self#clockCycles.text = "Clock Cycles: ".concat(cyclesStr); 
}

// ALWAYS REFRESH ALL DATA WHEN APP IS FIRST OPENED
refreshRegs();
refreshDram();
refreshSpad();
refreshCache();
updateClock();


// BUTTON LISTENERS //////////////////////////
var regsRefrshBtn = $(button#regsRefrshBtn);
regsRefrshBtn.on("click", refreshRegs);

var dramRefrshBtn = $(button#dramRefrshBtn);
dramRefrshBtn.on("click", refreshDram);

var spadRefrshBtn = $(button#spadRefrshBtn);
spadRefrshBtn.on("click", refreshSpad);

var cacheRefrshBtn = $(button#cacheRefrshBtn);
cacheRefrshBtn.on("click", refreshCache);

$(button#uploadInstrBtn).onClick = function(){
  var instrFileName = self#filePathField.text
  var allInstructions = view.uploadInstructionsFile(instrFileName); // pass some attributes and value
  if (allInstructions === ""){
	  self#instrctnsCell.text = "Something went wrong... double check your file name";
  } else {
	  
	  var instrctnsArr = allInstructions.split('X');
	  self#instrctnsCell.text = "";
	  // -2 in iterator there so exit instruction isn't printed
	  for (var i = 0; i < instrctnsArr.length - 1; i++){
		self#instrctnsCell.$append(<font color="blue">{i}: </font>{instrctnsArr[i]}<br>);
	  }
  }	
};

$(button#saveProgStateBtn).onClick = function(){
  var fileName = self#progPathField.text;
  
  var __ = view.saveProgState(fileName); // return is junk right now
};

$(button#readInProgStateBtn).onClick = function(){	
	
  var progFileName = self#progPathField.text
  var instrStrtAndEnd = view.readInProgState(progFileName);
  
  var arr = instrStrtAndEnd.split("_");
  
  var instrStrt = arr[0];
  var instrEnd = arr[1];
  
  var instrFileName = self#filePathField.text // this should probably be saved in memory somwhere
  var allInstructions = view.uploadInstructionsFile(instrFileName);
  var instrctnsArr = allInstructions.split('X');
  var numSteps1 = self#numStepsToRun.text;
  self#instrctnsCell.text = "";
  
  // -1 in iterator there so exit instruction isn't printed
  for (var i = 0; i < instrctnsArr.length - 1; i++){
	if( 0 <= i && i < instrStrt){
		self#instrctnsCell.$append(<font color="blue">{i}: </font><font color="green">{instrctnsArr[i]}</font><br>);
	} else {
		self#instrctnsCell.$append(<font color="blue">{i}: </font>{instrctnsArr[i]}<br>);
	}
  }
  
    // debugging... can remove this if instruction coloring works
  self#instrctnsCell.$append(<font color="red">debugging in TIS is easy!</font><br>);	
  refreshRegs();
  refreshDram();
  refreshSpad();
  refreshCache();
  updateClock();
  
  
};


// variable names are a mess here
$(button#runInstrs).onClick = function(){
  var numSteps = self#numStepsToRun.text;
  var cacheBool = "cacheBool_0";
  var pipeBool = "pipeBool_0";
  if (self#cacheCheckBox.state.checked == true){
	cacheBool = "cacheBool_1";  
  }
  
  if (self#pipeLineCheckBox.state.checked == true){
	cacheBool = "pipeBool_1";  
  }
  
  numSteps = numSteps.concat(cacheBool);
  numSteps = numSteps.concat(pipeBool);
  
  var __ = view.runInstsructionsFor(numSteps); // return is junk
  var instrFileName = self#filePathField.text
  var allInstructions = view.uploadInstructionsFile(instrFileName);
  var instrctnsArr = allInstructions.split('X');
  var numSteps1 = self#numStepsToRun.text;
  self#instrctnsCell.text = "";
  
  // -1 in iterator there so exit instruction isn't printed
  for (var i = 0; i < instrctnsArr.length - 1; i++){
	if( 0 <= i && i < numSteps1){
		self#instrctnsCell.$append(<font color="blue">{i}: </font><font color="green">{instrctnsArr[i]}</font><br>);
	} else {
		self#instrctnsCell.$append(<font color="blue">{i}: </font>{instrctnsArr[i]}<br>);
	}
  }
  updateClock();
};

$(button#singleStep).onClick = function(){
  var numSteps = "1";
  var cacheBool = "cacheBool_0";
  var pipeBool = "pipeBool_0";
  if (self#cacheCheckBox.state.checked == true){
	cacheBool = "cacheBool_1";  
  }
  
  if (self#pipeLineCheckBox.state.checked == true){
	cacheBool = "pipeBool_1";  
  }
  
  numSteps = numSteps.concat(cacheBool);
  numSteps = numSteps.concat(pipeBool);
  
  var curInstr = view.runInstsructionsFor(numSteps);
  
  
  var curInstrInt = curInstr.toInteger();
  
    // instruction coloring
  var instrFileName1 = self#filePathField.text
  var allInstructions1 = view.uploadInstructionsFile(instrFileName1);
  var instrctnsArr1 = allInstructions1.split('X');
  self#instrctnsCell.text = "";
  
  // -1 in iterator there so exit instruction isn't printed
  for (var i = 0; i < instrctnsArr1.length - 1; i++){
	if( 0 <= i && i < curInstrInt + 1){ // this  +1 should be handled in cpp
		self#instrctnsCell.$append(<font color="blue">{i}: </font><font color="green">{instrctnsArr1[i]}</font><br>);
	} else {
		self#instrctnsCell.$append(<font color="blue">{i}: </font>{instrctnsArr1[i]}<br>);
	}
  }
  updateClock();
  
  // debugging... can remove this if instruction coloring works
  self#instrctnsCell.$append(<font color="orange">single step click gang</font><br>);
  
  // update all non-control panels
  refreshRegs();
  refreshDram();
  refreshCache();
  updateClock();
  
};
