// REFRESH REGISTERS FUNCTION ///////////////////////////////////////////////////////
var regIdStr;
var globalRegArr = [];
function refreshRegs (){
	if (globalRegArr.length == 0){
		// first time loading instructions
		// create unique div elements for each register
		var regStr = view.grabDataFrom_Registers();
		globalRegArr = regStr.split(' ');
		for (var i = 0; i < globalRegArr.length; i++){
			regIdStr = "regLine_".concat(i.toString());
			self#regsCell.$append(<div id={regIdStr} class="cellLine"><font color="blue">{i}: </font>{globalRegArr[i]}</div><br>);
		}
		
	} else {
		// instructions must already be loaded
		// only update register lines that have changed
		var regStr = view.grabDataFrom_Registers();
		var tempRegArr = regStr.split(' ');
		for (var i = 0; i < globalRegArr.length; i++){
			if (globalRegArr[i] != tempRegArr[i]){
				regIdStr = "regLine_".concat(i.toString());
				var tmpStr = "div[id=".concat(regIdStr);
				var regLineID = tmpStr.concat("]");
				var regLine = self.select(regLineID);
				regLine.$content(<font color="blue">{i}: </font>{tempRegArr[i]});
			}
		}
		
		// update global reg array
		globalRegArr = tempRegArr;
	}
}

// REFRESH DRAM FUNCTION ///////////////////////////////////////////////////////
var dramIdStr;
var globalDramArr = [];
function refreshDram(){
	if (globalDramArr.length == 0){
		// first time loading instructions
		// create unique div elements for each register
		var dramStr = view.grabDataFrom_DRAM();
		globalDramArr = dramStr.split(' ');
		for (var i = 0; i < globalDramArr.length; i++){
			dramIdStr = "dramLine_".concat(i.toString());
			self#dramCell.$append(<div id={dramIdStr} class="cellLine"><font color="blue">{i}: </font>{globalDramArr[i]}</div><br>);
		}
		
	} else {
		// instructions must already be loaded
		// only update register lines that have changed
		var dramStr = view.grabDataFrom_DRAM();
		var tempDramArr = dramStr.split(' ');
		for (var i = 0; i < globalDramArr.length; i++){
			if (globalDramArr[i] != tempDramArr[i]){
				dramIdStr = "dramLine_".concat(i.toString());
				var tmpStr = "div[id=".concat(dramIdStr);
				var dramLineID = tmpStr.concat("]");
				var dramLine = self.select(dramLineID);
				dramLine.$content(<font color="blue">{i}: </font>{tempDramArr[i]});
			}
		}
		
		// update global reg array
		globalDramArr = tempDramArr;
	}
}

// REFRESH SPAD FUNCTION ///////////////////////////////////////////////////////
var spadIdStr;
var globalSpadArr = [];
function refreshSpad(){
	if (globalSpadArr.length == 0){
		// first time loading instructions
		// create unique div elements for each register
		var spadStr = view.grabDataFrom_SPAD();
		globalSpadArr = spadStr.split(' ');
		for (var i = 0; i < globalSpadArr.length; i++){
			spadIdStr = "spadLine_".concat(i.toString());
			self#spadCell.$append(<div id={spadIdStr} class="cellLine"><font color="blue">{i}: </font>{globalSpadArr[i]}</div><br>);
		}
		
	} else {
		// instructions must already be loaded
		// only update register lines that have changed
		var spadStr = view.grabDataFrom_SPAD();
		var tempSpadArr = spadStr.split(' ');
		for (var i = 0; i < globalSpadArr.length; i++){
			if (globalSpadArr[i] != tempSpadArr[i]){
				spadIdStr = "spadLine_".concat(i.toString());
				var tmpStr = "div[id=".concat(spadIdStr);
				var spadLineID = tmpStr.concat("]");
				var spadLine = self.select(spadLineID);
				spadLine.$content(<font color="blue">{i}: </font>{tempSpadArr[i]});
			}
		}
		
		// update global reg array
		globalSpadArr = tempSpadArr;
	}
}

// REFRESH CACHE FUNCTION ///////////////////////////////////////////////////////
var cacheIdStr;
var globalCacheArr = [];
function refreshCache(){
	if (globalCacheArr.length == 0){
		// first time loading instructions
		// create unique div elements for each register
		var cacheStr = view.grabDataFrom_Cache();
		globalCacheArr = cacheStr.split('X');
		for (var i = 0; i < globalCacheArr.length; i++){
			cacheIdStr = "cacheLine_".concat(i.toString());
			self#cacheCell.$append(<div id={cacheIdStr} class="cellLine"><font color="blue">{i}: </font>{globalCacheArr[i]}</div><br>);
		}
		
	} else {
		// instructions must already be loaded
		// only update register lines that have changed
		var cacheStr = view.grabDataFrom_Cache();
		var tempCacheArr = cacheStr.split('X');
		for (var i = 0; i < globalCacheArr.length; i++){
			if (globalCacheArr[i] != tempCacheArr[i]){
				cacheIdStr = "cacheLine_".concat(i.toString());
				var tmpStr = "div[id=".concat(cacheIdStr);
				var cacheLineID = tmpStr.concat("]");
				var cacheLine = self.select(cacheLineID);
				cacheLine.$content(<font color="blue">{i}: </font>{tempCacheArr[i]});
			}
		}
		
		// update global reg array
		globalCacheArr = tempCacheArr;
	}
}

function updateClock(){
	// grab all cachelines from cache as string
	// cache data comes in as .... abcd ....
	// where ' ' acts as a delimiter and a,b,c,d are words from a cacheLine
	var cyclesStr = view.getClockCount();

	self#clockCycles.text = "Clock Cycles: ".concat(cyclesStr); 
}

var globalInstrArr;
var instrIdStr;
function uploadInstructions(){
	// instructions file is only read once, during this function call
	// global instructions array is initialized using that file read
	var instrFileName = self#filePathField.text;
	var instrsStr = view.uploadInstructionsFile(instrFileName); // pass some attributes and value
	if (instrsStr === ""){
		self#instrctnsCell.text = "Your file name is empty!";
	} else {
		self#instrctnsCell.text = "";
		globalInstrArr = instrsStr.split('X');
		
		// -1 in iterator so exit instruction isn't printed
		for (var i = 0; i < globalInstrArr.length - 1; i++){
			instrIdStr = "instrLine_".concat(i.toString());
			self#instrctnsCell.$append(<div id={instrIdStr} class="cellLine"><font color="blue">{i}: </font>{globalInstrArr[i]}</div><br>);
		}
	}

	// have instructions automatically show up in DRAM cell
	refreshDram();
};

// ALWAYS REFRESH ALL DATA WHEN APP IS FIRST OPENED
refreshRegs();
refreshDram();
refreshSpad();
refreshCache();
updateClock();


// BUTTON LISTENERS //////////////////////////
var regsRefrshBtn = $(button#regsRefrshBtn);
regsRefrshBtn.on("click", refreshRegs);

var dramRefrshBtn = $(button#dramRefrshBtn);
dramRefrshBtn.on("click", refreshDram);

var spadRefrshBtn = $(button#spadRefrshBtn);
spadRefrshBtn.on("click", refreshSpad);

var cacheRefrshBtn = $(button#cacheRefrshBtn);
cacheRefrshBtn.on("click", refreshCache);

var uploadInstrBtn = $(button#uploadInstrBtn);
uploadInstrBtn.on("click", uploadInstructions);


$(button#prgrmRefrshBtn).onClick = function(){
	var __ = view.refreshProgram();
	uploadInstructions();
	refreshRegs();
	refreshDram();
	refreshSpad();
	refreshCache();
	updateClock();
};

$(button#saveProgStateBtn).onClick = function(){
  var fileName = self#progPathField.text;
  
  var __ = view.saveProgState(fileName); // return is junk right now
};

$(button#readInProgStateBtn).onClick = function(){	
	
  var progFileName = self#progPathField.text
  var instrStrtAndEnd = view.readInProgState(progFileName);
  
  var arr = instrStrtAndEnd.split("_");
  
  var instrStrt = arr[0];
  var instrEnd = arr[1];
  
  var instrFileName = self#filePathField.text // this should probably be saved in memory somwhere
  var allInstructions = view.uploadInstructionsFile(instrFileName);
  var instrctnsArr = allInstructions.split('X');
  var numSteps1 = self#numStepsToRun.text;
  self#instrctnsCell.text = "";
  
  // -1 in iterator there so exit instruction isn't printed
  for (var i = 0; i < instrctnsArr.length - 1; i++){
	if( 0 <= i && i < instrStrt){
		self#instrctnsCell.$append(<font color="blue">{i}: </font><font color="green">{instrctnsArr[i]}</font><br>);
	} else {
		self#instrctnsCell.$append(<font color="blue">{i}: </font>{instrctnsArr[i]}<br>);
	}
  }
  
    // debugging... can remove this if instruction coloring works
  self#instrctnsCell.$append(<font color="red">debugging in TIS is easy!</font><br>);	
  refreshRegs();
  refreshDram();
  refreshSpad();
  refreshCache();
  updateClock();
  
  
};


// variable names are a mess here
$(button#runInstrs).onClick = function(){
  var numSteps = self#numStepsToRun.text;
  var cacheBool = "cacheBool_0";
  var pipeBool = "pipeBool_0";
  if (self#cacheCheckBox.state.checked == true){
	cacheBool = "cacheBool_1";  
  }
  
  if (self#pipeLineCheckBox.state.checked == true){
	pipeBool = "pipeBool_1";  
  } 
  
  numSteps = numSteps.concat(cacheBool);
  numSteps = numSteps.concat(pipeBool);
  
  var curInstr = view.runInstsructionsFor(numSteps); // return is junk
  var curInstrInt = curInstr.toInteger();
  
	// instruction coloring
	for (var i = 0; i < globalInstrArr.length - 1; i++){
		instrIdStr = "instrLine_".concat(i.toString());
		var tmpStr = "div[id=".concat(instrIdStr);
		var instrLineID = tmpStr.concat("]");
		var instrLine = self.select(instrLineID);
		
		if( 0 <= i && i < curInstrInt + 1){ // this  +1 should be handled in cpp
			instrLine.$content(<font color="blue">{i}: </font><font color="green">{globalInstrArr[i]}</font>);
		} else {
			instrLine.$content(<font color="blue">{i}: </font>{globalInstrArr[i]});
		}
	}
	
	 // update all non-control panels
  refreshRegs();
  refreshDram();
  refreshSpad();
  refreshCache();
  updateClock();
};

$(button#singleStep).onClick = function(){
	var numSteps = "1";
	var cacheBool = "cacheBool_0";
	var pipeBool = "pipeBool_0";
	if (self#cacheCheckBox.state.checked == true){
		cacheBool = "cacheBool_1";  
	}

	if (self#pipeLineCheckBox.state.checked == true){
		pipeBool = "pipeBool_1";  
	}

	numSteps = numSteps.concat(cacheBool);
	numSteps = numSteps.concat(pipeBool);

	var curInstr = view.runInstsructionsFor(numSteps);
	var curInstrInt = curInstr.toInteger();
  
	// instruction coloring
	for (var i = 0; i < globalInstrArr.length - 1; i++){
		instrIdStr = "instrLine_".concat(i.toString());
		var tmpStr = "div[id=".concat(instrIdStr);
		var instrLineID = tmpStr.concat("]");
		var instrLine = self.select(instrLineID);
		
		if( 0 <= i && i < curInstrInt + 1){ // this  +1 should be handled in cpp
			instrLine.$content(<font color="blue">{i}: </font><font color="green">{globalInstrArr[i]}</font>);
		} else {
			instrLine.$content(<font color="blue">{i}: </font>{globalInstrArr[i]});
		}
	}
  
  // update all non-control panels
  refreshRegs();
  refreshDram();
  refreshSpad();
  refreshCache();
  updateClock();
  
};
