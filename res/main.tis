// REFRESH REGISTERS FUNCTION ///////////////////////////////////////////////////////
var numRegClicks = 0;
function refreshRegs (){
	// grab all data as big string
	// cache data comes in as .... abcd ....
	// where ' ' acts as a delimiter and a,b,c,d are words from a cacheLine
	var regStr = view.grabDataFrom_Registers();

	// convert cache string into array
	var regArr = regStr.split(' ');
	
	// button click testing
	if (numRegClicks > 0){
		self#regsCell.text = "number of times refreshed: ".concat(numRegClicks.toString());
		self#regsCell.$append(<br>);
	}
	
	// add in each line to cache UI with a break character
	// first set text to the empty string since we are repopulating the whole thing
	for (var i = 0; i < regArr.length; i++){
		self#regsCell.$append({regArr[i]}<br>);
	}
	
	numRegClicks++;
}

var numDramClicks = 0;
function refreshDram(){
	// grab all DRAM lines from DRAM as string
	// cache data comes in as .... abcd ....
	// where ' ' acts as a delimiter and a,b,c,d are words from a cacheLine
	var dramStr = view.grabDataFrom_DRAM();

	// convert cache string into array
	var dramArr = dramStr.split(' ');

	// button click testing
	if (numDramClicks > 0){
		self#dramCell.text = "number of times refreshed: ".concat(numDramClicks.toString());
		self#dramCell.$append(<br>);
	}
	
	// add in each line to cache UI with a break character
	for (var i = 0; i < dramArr.length; i++){
		self#dramCell.$append({dramArr[i]}<br>);
	}
	
	
	numDramClicks++;
}

var numCacheClicks = 0;
function refreshCache(){
	// grab all cachelines from cache as string
	// cache data comes in as .... abcd ....
	// where ' ' acts as a delimiter and a,b,c,d are words from a cacheLine
	var cacheStr = view.grabDataFrom_Cache();

	// convert cache string into array
	var cacheArr = cacheStr.split(' ');
	
	// button click testing
	if (numCacheClicks > 0){
		self#cacheCell.text = "number of times refreshed: ".concat(numCacheClicks.toString());
		self#cacheCell.$append(<br>);
	}

	// add in each line to cache UI with a break character
	for (var i = 0; i < cacheArr.length; i++){
		self#cacheCell.$append({cacheArr[i]}<br>);
	}
	
	numCacheClicks++;
}

function updateClock(){
	// grab all cachelines from cache as string
	// cache data comes in as .... abcd ....
	// where ' ' acts as a delimiter and a,b,c,d are words from a cacheLine
	var cyclesStr = view.getClockCount();

	self#clockCycles.text = "Clock Cycles: ".concat(cyclesStr); 
}

// ALWAYS REFRESH ALL DATA WHEN APP IS FIRST OPENED
refreshRegs();
refreshDram();
refreshCache();
updateClock();


// BUTTON LISTENERS //////////////////////////
var regsRefrshBtn = $(button#regsRefrshBtn);
regsRefrshBtn.on("click", refreshRegs);

var dramRefrshBtn = $(button#dramRefrshBtn);
dramRefrshBtn.on("click", refreshDram);

var cacheRefrshBtn = $(button#cacheRefrshBtn);
cacheRefrshBtn.on("click", refreshCache);

$(button#uploadInstrBtn).onClick = function(){
  var instrFileName = self#filePathField.text
  var allInstructions = view.uploadInstructionsFile(instrFileName); // pass some attributes and value
  if (allInstructions === ""){
	  self#instrctnsCell.text = "Something went wrong... double check your file name";
  } else {
	  
	  var instrctnsArr = allInstructions.split('X');
	  self#instrctnsCell.text = "";
	  for (var i = 0; i < instrctnsArr.length; i++){
		self#instrctnsCell.$append({instrctnsArr[i]}<br>);
	  }
  }	
};

$(button#saveProgStateBtn).onClick = function(){
  var __ = view.saveProgState("progSaveTest.txt"); // return is junk right now
};

$(button#readInProgStateBtn).onClick = function(){
  var progFileName = self#progPathField.text
  var __ = view.readInProgState(progFileName); // return is junk right now
};

$(button#runInstrs).onClick = function(){
  var numSteps = self#numStepsToRun.text;
  var cacheBool = "cacheBool_0";
  var pipeBool = "pipeBool_0";
  if (self#cacheCheckBox.state.checked == true){
	cacheBool = "cacheBool_1";  
  }
  
  if (self#pipeLineCheckBox.state.checked == true){
	cacheBool = "pipeBool_1";  
  }
  
  numSteps = numSteps.concat(cacheBool);
  numSteps = numSteps.concat(pipeBool);
  
  var __ = view.runInstsructionsFor(numSteps); // return is junk right now
  self#instrctnsCell.text = "";
  for (var i = 0; i < instrctnsArr.length; i++){
	if( 0 <= i && i < numSteps){
		self#instrctnsCell.$append(<font color="green">{instrctnsArr[i]}</font><br>);
	} else {
		self#instrctnsCell.$append({instrctnsArr[i]}<br>);
	}
  }
  updateClock();
};